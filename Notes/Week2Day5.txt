Week 2 Day 5
3/20/2020

Topics to study
in T-SQL, functions, stored procedures, views, triggers 
[focus more on the purpose of these things than the exact syntax]

ACID properties of a transaction
code-first approach in EF Core vs database-first approach in EF Core 
[make sure you're not confusing EF 6 with EF Core]

Database-first approach to entity framework

notes in the git

connection string comes from Azure ADO.net tab

then run the command:

dotnet ef dbcontext scaffold "Server=tcp:2020-training-stacey.database.windows.net,1433;Initial Catalog=Customer;Persist Security Info=False;User ID=stacey;Password=Umbrella123();MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" Microsoft.EntityFrameworkCore.SqlServer --startup-project ../StudentApp.App --force --output-dir Entities


dotnet ef dbcontext scaffold "Server=tcp:2020-training-stacey.database.windows.net,1433;Initial Catalog=CornNuggets;Persist Security Info=False;User ID=stacey;Password=Umbrella123();MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" Microsoft.EntityFrameworkCore.SqlServer --force --output-dir Entities

creates a folder in the solution called Entities



updated project 0

project 0: store application
Feb 24 2020 Arlington .NET Extended / Nick Escalona

functionality
place orders to store locations for customers
add a new customer
search customers by name
display details of an order
display all order history of a store location
display all order history of a customer
input validation
exception handling [new]
deserialize data from disk on startup [new]
serialize data to disk [new]
persistent data (read from file); no prices, customers, order history, etc. hardcoded in C# [new]
(optional: order history can be sorted by earliest, latest, cheapest, most expensive)
(optional: get a suggested order for a customer based on his order history)
(optional: display some statistics based on order history)
(optional: asynchronous file I/O) [new]
design [new]
don't use public fields
define and use at least one interface
core / domain / business logic
class library
contains all business logic
contains domain classes (customer, order, store, product, etc.)
documentation with <summary> XML comments on all public types and members (optional: <params> and <return>)
(recommended: has no dependency on UI, data access, or any input/output considerations)
customer
has first name, last name, etc.
(optional: has a default store location to order from)
order
has a store location
has a customer
has an order time (when the order was placed)
can contain multiple kinds of product in the same order
rejects orders with unreasonably high product quantities
(optional: some additional business rules, like special deals)
location
has an inventory
inventory decreases when orders are accepted
rejects orders that cannot be fulfilled with remaining inventory
(optional: for at least one product, more than one inventory item decrements when ordering that product)
product (etc.)
user interface
interactive console application
has only display- and input-related code
low-priority component, will be replaced when we move to project 1
data access (recommended)
class library
recommended separate project for serialization and deserialization code
contains data access logic but no business logic
test
at least 10 test methods
use TDD for some of the application
focus on unit testing business logic; testing the console app is very low priority

